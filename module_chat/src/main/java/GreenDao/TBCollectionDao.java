package GreenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.aitd.module_chat.ui.emotion.db.TBCollection;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TBCOLLECTION".
*/
public class TBCollectionDao extends AbstractDao<TBCollection, Long> {

    public static final String TABLENAME = "TBCOLLECTION";

    /**
     * Properties of entity TBCollection.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MessageId = new Property(1, int.class, "messageId", false, "MESSAGE_ID");
        public final static Property LocalPath = new Property(2, String.class, "localPath", false, "LOCAL_PATH");
        public final static Property OriginUrl = new Property(3, String.class, "originUrl", false, "ORIGIN_URL");
        public final static Property Type = new Property(4, String.class, "type", false, "TYPE");
        public final static Property OwnerId = new Property(5, String.class, "ownerId", false, "OWNER_ID");
    }


    public TBCollectionDao(DaoConfig config) {
        super(config);
    }
    
    public TBCollectionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TBCOLLECTION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MESSAGE_ID\" INTEGER NOT NULL ," + // 1: messageId
                "\"LOCAL_PATH\" TEXT," + // 2: localPath
                "\"ORIGIN_URL\" TEXT," + // 3: originUrl
                "\"TYPE\" TEXT," + // 4: type
                "\"OWNER_ID\" TEXT);"); // 5: ownerId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TBCOLLECTION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TBCollection entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMessageId());
 
        String localPath = entity.getLocalPath();
        if (localPath != null) {
            stmt.bindString(3, localPath);
        }
 
        String originUrl = entity.getOriginUrl();
        if (originUrl != null) {
            stmt.bindString(4, originUrl);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
 
        String ownerId = entity.getOwnerId();
        if (ownerId != null) {
            stmt.bindString(6, ownerId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TBCollection entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMessageId());
 
        String localPath = entity.getLocalPath();
        if (localPath != null) {
            stmt.bindString(3, localPath);
        }
 
        String originUrl = entity.getOriginUrl();
        if (originUrl != null) {
            stmt.bindString(4, originUrl);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
 
        String ownerId = entity.getOwnerId();
        if (ownerId != null) {
            stmt.bindString(6, ownerId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TBCollection readEntity(Cursor cursor, int offset) {
        TBCollection entity = new TBCollection( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // messageId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // localPath
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // originUrl
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // ownerId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TBCollection entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMessageId(cursor.getInt(offset + 1));
        entity.setLocalPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOriginUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOwnerId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TBCollection entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TBCollection entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TBCollection entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
